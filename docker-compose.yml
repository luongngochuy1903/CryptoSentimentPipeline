version: "3.7"

x-airflow-common: &airflow-common
  build:
    context: ./airflow
    dockerfile: Dockerfile
  env_file:
    - ./airflow/airflow.env
  environment:
    - AIRFLOW__CORE__EXECUTOR=LocalExecutor
    - PYTHONPATH=/opt/airflow
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/modules:/opt/airflow/modules
    - ./config:/opt/airflow/sysconfig
    - ./utils:/opt/airflow/sysutils
    - ./logs:/opt/airflow/logs
  networks:
    - crypto-network
  depends_on:
    postgres:
      condition: service_healthy
    
services:
  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    depends_on:
      - airflow-scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - crypto-network

  airflow-scheduler:
    <<: *airflow-common
    command: bash -c "airflow db migrate && airflow users create --username admin --firstname Huy --lastname Luong --role Admin --email huy@example.com --password admin && airflow scheduler"
    restart: always
    networks:
      - crypto-network

  minio:
    hostname: minio
    image: minio/minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - ./data:/data
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    command: server /data --console-address ":9001"
    networks:
      - crypto-network

  spark-master:
    build: ./spark
    image: custom-bitnami-spark:3.5.4
    environment:
      AWS_ACCESS_KEY_ID: aws_access_key
      AWS_SECRET_ACCESS_KEY: aws_secret_key
      SPARK_MODE: master
      AWS_REGION: us-east-1
    volumes:
      - ./src/backend/jobs:/opt/spark_jobs
      - ./spark/spark-config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    depends_on:
      - postgres
      - minio
    restart: on-failure:3
    ports:
      - "${SPARK_API_PORT:-7077}:7077"
      - "${SPARK_CONSOLE_PORT:-8088}:8080"
      - "${SPARK_WEB_UI_PORT:-8081}:8081"
    networks:
      - crypto-network

  spark-worker:
    build: ./spark
    image: custom-bitnami-spark:3.5.4
    environment:
      AWS_ACCESS_KEY_ID: aws_access_key
      AWS_SECRET_ACCESS_KEY: aws_secret_key
      AWS_REGION: us-east-1
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 4G
      SPARK_WORKER_CORES: 2
    volumes:
      - ./src/backend/jobs:/opt/spark_jobs
      - ./spark/spark-config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    depends_on:
      - postgres
      - spark-master
      - minio
    restart: on-failure:3
    networks:
      - crypto-network
  
  # pyspark-notebook:
  #   build:
  #     context: ./notebook
  #   container_name: pyspark-notebook
  #   ports:
  #     - "8888:8888"
  #   volumes:
  #     - ./src/backend/jobs:/home/jovyan/work
  #     - ./spark/spark-config/spark-defaults.conf:/usr/local/spark/conf/spark-defaults.conf
  #   networks:
  #     - crypto-network
  
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: airflow         
      POSTGRES_PASSWORD: airflow 
      POSTGRES_DB: airflow             
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    volumes:
      - ./sql:/docker-entrypoint-initdb.d
      - ./src/backend/db/backend.sql:/init_sql/backend.sql
    networks:
      - crypto-network

  kafka-python:
    build:
      context: ./scraping
      dockerfile: Dockerfile
    container_name: kafka-python
    volumes:
      - ./src/backend/producer:/app/scripts/producer     
      - ./src/backend/consumer:/app/scripts/consumer 
      - ./config:/app/config
      - ./utils:/app/utils
    environment:
      - PYTHONUNBUFFERED=1
    networks:
      - crypto-network
  
  #Kafka service
  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - crypto-network

  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - crypto-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "18081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"
    networks:
      - crypto-network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.6.1
    container_name: control-center
    depends_on:
      - zookeeper
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 2
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      PORT: 9021
    networks:
      - crypto-network

  streamlit:
    build: ./streamlit_app
    ports:
      - "8501:8501"
    volumes:
      - ./src/frontend:/app/src
      - ./config:/app/config
      - ./utils:/app/utils
    depends_on:
      - kafka
      - postgres
    networks:
      - crypto-network

networks:
  crypto-network:
    driver: bridge